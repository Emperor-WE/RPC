syntax = "proto3";

package raftKVRpcProctoc; //所在的命名空间

option cc_generic_services = true;  //开启stub服务

// 日志实体
message GetArgs{
    bytes Key         = 1 ;     // 标识存储的数据项
    bytes ClientId    = 2 ;     // 客户端的唯一标识符
    int32 RequestId   = 3;      // 请求的唯一ID，用于跟踪和匹配请求和响应
}

message GetReply  {
    //	下面几个参数和论文中相同
    bytes Err   = 1;            // 错误信息，如果没有错误则是空
    bytes Value = 2;            // 从服务器获取的值，如果键不存在则可能为空
}

// Put or Append
message PutAppendArgs  {
  bytes Key     = 1;            // 键值
  bytes Value   = 2 ;           // 要存储的值
  bytes Op      = 3;            // 操作类型，通常是 "Put" 或 "Append"
  bytes ClientId    = 4;        // 客户端的唯一标识符
  int32 RequestId   = 5;        // 请求的唯一ID
}

message PutAppendReply  {
  bytes Err = 1;                // 错误信息，如果没有错误则是空
}

//只有raft节点之间才会涉及rpc通信
service kvServerRpc
{
  rpc PutAppend(PutAppendArgs) returns(PutAppendReply);
  rpc Get (GetArgs) returns (GetReply);
}

// message ResultCode
// {
//     int32 errcode = 1;
//     bytes errmsg = 2;
// }

// message GetFriendsListRequest  //请求，响应
// {
//     uint32 userid = 1;
// }

// message GetFriendsListResponse  //请求，响应
// {
//     ResultCode result = 1;
//     repeated bytes friends = 2;
// }

// // 好友模块
// service FiendServiceRpc  //具体的服务模块和服务方法
// {
//     rpc GetFriendsList(GetFriendsListRequest) returns(GetFriendsListResponse);
// }